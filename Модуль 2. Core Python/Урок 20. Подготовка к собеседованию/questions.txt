ПОДГОТОВКА К СОБЕСЕДОВАНИЮ

### Вопросы по курсу Core Python. Часть 1

### Переменные

1. Что такое переменная в Python и как она создается?
2. Какие правила нужно соблюдать при именовании переменных в Python?
3. Как присвоить значение переменной и изменить его?
4. Что такое динамическая типизация в Python?
5. Что такое глобальные и локальные переменные? Приведите пример.

### Строки

1. Как создать строку в Python? Приведите различные способы.
2. Какие основные методы строк вы знаете? Приведите примеры использования методов `split()`, `join()`, `replace()`.
3. Как использовать форматирование строк с помощью метода `format()` и f-строк?
4. Как извлекать подстроки с помощью индексов и срезов?
5. Как конкатенировать и умножать строки?

### Условия

1. Как работают условные операторы `if`, `elif` и `else`? Приведите пример.
2. Как использовать логические операторы `and`, `or` и `not` в условных выражениях?
3. Что такое тернарный оператор и как его использовать в Python?
4. Как вложенные условные операторы помогают в сложных логических проверках?
5. Как сравниваются строки в условных операторах?

### Списки

1. Как создать список в Python и как добавить элементы в список?
2. Какие методы списка вы знаете? Приведите примеры использования методов `append()`, `remove()`, `pop()`.
3. Как работать со срезами списков?
4. Как объединить два списка и как найти общие элементы?
5. Как отсортировать список по возрастанию и убыванию?

### Циклы

1. Как работает цикл `for` в Python? Приведите пример.
2. Как работает цикл `while`? Приведите пример.
3. Как использовать операторы `break` и `continue` в циклах?
4. Как создавать вложенные циклы?
5. Как итерироваться по списку с использованием индексов?

### Итераторы и генераторы списков

1. Что такое итератор и как он используется в Python?
2. Как создать генератор списка? Приведите пример.
3. В чем разница между списковыми включениями и обычными циклами `for`?
4. Как работают функции `iter()` и `next()`?
5. Как создать и использовать генератор для чтения большого файла построчно?

### Словари, кортежи, множества

1. Как создать словарь и как добавлять в него элементы?
2. Как получить значение из словаря по ключу и как проверить существование ключа?
3. Как работают кортежи и чем они отличаются от списков?
4. Что такое множество и каковы его основные операции (объединение, пересечение, разность)?
5. Как итерироваться по ключам и значениям словаря?

### Функции

1. Как определить функцию в Python и как вызвать ее?
2. Как работают аргументы функции и какие виды аргументов существуют (позиционные, именованные)?
3. Как задать значения аргументов по умолчанию?
4. Что такое область видимости (scope) переменных в функциях?
5. Как вернуть несколько значений из функции?

### Args, kwargs. Замыкания функций

1. Что такое `args` и `*kwargs` и как их использовать в функциях?
2. Как работают замыкания (closures) и для чего они могут быть полезны?
3. Как передать произвольное количество аргументов в функцию?
4. В чем разница между `args` и `*kwargs`?